* Polymorphism

Polymorphism is one of the fundamental principles of Object-Oriented Programming (OOP). It allows a single interface to be used for different types of objects, enabling flexibility, scalability, and code reuse.

Polymorphism in Go is primarily achieved using interfaces, as Go does not support method overloading or classical inheritance like Java or C#.

Polymorphism means "many forms." It allows a method, function, or object to behave differently based on the context. Polymorphism enables dynamic method resolution and method flexibility, making applications easier to extend and maintain.

** Key Benefits of Polymorphism

- Code Reusability: Write a single interface that works for multiple types
- Scalability: Add new functionalities with minimal code changes.
- Maintainability: Reduce complexity and improve code clarity.

** Polymorphism using Interfaces in Go

#+begin_src go
  package main

  import "fmt"

  type Animal interface {
          speak()
  }

  type Dog struct {
          name string
  }

  func (d Dog) speak() {
          fmt.Println(d.name, "is barking")
  }

  type Cat struct {
          name string
  }

  func (c Cat) speak() {
          fmt.Println(c.name,"is mewing")
  }

  func main() {

          var a Animal = Dog{name:"Tommy",}

          a.speak()

          var a1 Animal = Cat{name:"Tom",}

          a1.speak()
	
  }

#+end_src

** Using Polymorphism with Functions

#+begin_src go
  package main

  import "fmt"

  // Define an interface
  type Vehicle interface {
          Start()
  }

  // Implementing the interface in Car
  type Car struct{}

  func (c Car) Start() {
          fmt.Println("Car is starting...")
  }

  // Implementing the interface in Bike
  type Bike struct{}

  func (b Bike) Start() {
          fmt.Println("Bike is starting...")
  }

  // Function that takes any Vehicle
  func StartVehicle(v Vehicle) {
          v.Start()
  }

  func main() {
          car := Car{}
          bike := Bike{}
	
          StartVehicle(car)
          StartVehicle(bike)
  }
#+end_src

** Real World Example

#+begin_src go
  package main

  import "fmt"

  type Payment interface {
          pay(amount float64)
  }

  type Creditcardpayment struct {}

  func (c Creditcardpayment) pay(amount float64) {
          fmt.Printf("Paid %.2f using creditcard",amount)
  }

  type Paypal struct {}

  func (p Paypal) pay(amount float64) {
          fmt.Printf("Paid %.2f using paypal", amount)
  }

  func main(){

          amount := 45.6

          var p Payment = Creditcardpayment{}

          p.pay(amount)

          var p1 Payment = Paypal{}

          p.pay(amount)
  }
#+end_src
